# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: data.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime

import betterproto
import grpclib

from .google import protobuf


@dataclass
class User(betterproto.Message):
    id: str = betterproto.string_field(1)
    created_at: datetime = betterproto.message_field(2)
    email: str = betterproto.string_field(3)


@dataclass
class UserResponse(betterproto.Message):
    user: "User" = betterproto.message_field(1)


@dataclass
class CreateUserRequest(betterproto.Message):
    email: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)


@dataclass
class GetUserByEmailRequest(betterproto.Message):
    email: str = betterproto.string_field(1)


@dataclass
class AuthenticateUserRequest(betterproto.Message):
    email: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)


@dataclass
class UpdateUserRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    email: str = betterproto.string_field(2)
    password_hash: str = betterproto.string_field(3)
    version: int = betterproto.int32_field(4)


@dataclass
class DeleteUserRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


class DataServiceStub(betterproto.ServiceStub):
    async def create_user(self, *, email: str = "", password: str = "") -> UserResponse:
        request = CreateUserRequest()
        request.email = email
        request.password = password

        return await self._unary_unary(
            "/data.DataService/CreateUser",
            request,
            UserResponse,
        )

    async def get_user_by_email(self, *, email: str = "") -> UserResponse:
        request = GetUserByEmailRequest()
        request.email = email

        return await self._unary_unary(
            "/data.DataService/GetUserByEmail",
            request,
            UserResponse,
        )

    async def authenticate_user(
        self, *, email: str = "", password: str = ""
    ) -> UserResponse:
        request = AuthenticateUserRequest()
        request.email = email
        request.password = password

        return await self._unary_unary(
            "/data.DataService/AuthenticateUser",
            request,
            UserResponse,
        )

    async def update_user(
        self,
        *,
        id: str = "",
        email: str = "",
        password_hash: str = "",
        version: int = 0,
    ) -> UserResponse:
        request = UpdateUserRequest()
        request.id = id
        request.email = email
        request.password_hash = password_hash
        request.version = version

        return await self._unary_unary(
            "/data.DataService/UpdateUser",
            request,
            UserResponse,
        )

    async def delete_user(self, *, id: str = "") -> protobuf.Empty:
        request = DeleteUserRequest()
        request.id = id

        return await self._unary_unary(
            "/data.DataService/DeleteUser",
            request,
            protobuf.Empty,
        )
